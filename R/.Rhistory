predictor <- Predictor$new(bb_model, data=chess_data, predict.function=bb_model$get_pred)
bb_model <- model_class()
predictor <- Predictor$new(bb_model, data=chess_data, predict.function=bb_model$get_pred)
cf_classif <- MOCClassif$new(predictor)
chess_data
cn
cn <- colnames(chess_data)
chess_data[cn]
cn[1]
chess_data[cn[1]]
a1 <-cn[1]
a1 <-cn[1]
chess_data[a1]
chess_data[a1] <- as.factor(chess_data[a1])
chess_data$a1
chess_data
chess_data$c6
chess_data$a2
chess_data[cn[4]] <- as.factor(chess_data[cn[4]])
chess_data[cn[4]]
chess_data[cn[4]]
chess_data[cn[4]] <- as.factor(chess_data[cn[4]])
chess_data[, cn[5]] <- as.factor(chess_data[, cn[5]])
chess_data]
chess_data[, cn[5]
]
library(foreach)
install.packages("foreach")
library(foreach)
install.packages("devtools")
install.packages("devtools")
install.packages("bigchess")
install.packages("stringr")
devtools::install_github("dandls/counterfactuals")
library(counterfactuals)
library(iml)
library(bigchess)
library(stringr)
library(methods)
CODE_TO_PIECE <- c('P', 'N', 'B', 'R', 'Q', 'K', 'p', 'n', 'b', 'r', 'q', 'k')
# paths
engine_path <- "C:\\Users\\Jasmina\\Documents\\PhD\\CARLA\\engines\\chess\\stockfish_14.1\\stockfish_14.1"
data_path <- "C:\\Users\\Jasmina\\Documents\\PhD\\CARLA\\data\\chess\\dataset.csv"
# loading engine
eng <- uci_engine(engine_path)
# extracts best move as string from engine's response
get_best_move <- function(eng, position_fen) {
eng <- uci_position(eng, fen=position_fen)
str_move <- tail(eng$temp, n=1)
tokens <- str_split(str_move, " ")
best_move <- tokens[[1]][2]
return(best_move)
}
best_move <- get_best_move(eng, "7k/1p4p1/pn4Bp/8/2R2P2/2Pp2P1/1P3BK1/rn6 w - - 0 1")
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
str(chess_data)
from_board_to_fen <- function(board) {
num_rows <- 8
fen <- ""
r <- 0
while (r < num_rows){
c <- 0
while (c < num_rows) {
curr_index = num_rows * (7-r) + c
if (board[[(curr_index + 1)]] == 0) {
blank_counter <- 0
while (board[[curr_index + 1]] == 0) {
blank_counter <- blank_counter + 1
c <- c + 1
if (c >= num_rows) {
break
}
curr_index <- num_rows * (7-r) + c
}
fen <- paste(fen, as.character(blank_counter), sep="")
}
else {
code <- CODE_TO_PIECE[board[[curr_index + 1]]]
fen <- paste(fen, as.character(code), sep="")
c <- c + 1
}
}
r <- r + 1
if (r < num_rows){
fen <- paste(fen, "/", sep="")
}
}
player_num <- tail(board, n=1)
player <- " w "
if (player_num == 1) {
player <- " b "
}
fen <- paste(fen, player, sep="")
fen <- paste(fen, "- - 0 1", sep="")
return(fen)
}
board <- c(10, 8, 0, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 3, 6, 0,
0, 0, 1, 7, 0, 0, 1, 0,
0, 0, 4, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0,
7, 8, 0, 0, 0, 0, 3, 7,
0, 7, 0, 0, 0, 0, 7, 0,
0, 0, 0, 0, 0, 0, 0, 12, 0)
fen <- from_board_to_fen(board)
fen
library("methods")
# create bb model class
model_class <- setRefClass("model_class", fields=list(task="character"), methods=list(
get_pred = function(model, newdata) {
n <- nrow(newdata)
i <- 0
y_hat <- vector(mode="character", length=n)
while (i < n) {
cf <- as.list(newdata[i,])
fen_board <- from_board_to_fen(newdata)
best_move <- get_best_move(eng, fen_board)
y_hat[i] <- best_move
i <- i + 1
}
return(y_hat)
}
))
# define model
bb_model <- model_class(task="chess")
# define predictor
predictor <- Predictor$new(bb_model, data=chess_data, predict.function=bb_model$get_pred)
# def cf method
cf_classif <- MOCClassif$new(predictor)
.Last.error.trace
# extracts best move as string from engine's response
get_best_move <- function(eng, position_fen) {
print(fen)
eng <- uci_position(eng, fen=position_fen)
str_move <- tail(eng$temp, n=1)
tokens <- str_split(str_move, " ")
best_move <- tokens[[1]][2]
return(best_move)
}
# define model
bb_model <- model_class(task="chess")
# define predictor
predictor <- Predictor$new(bb_model, data=chess_data, predict.function=bb_model$get_pred)
# def cf method
cf_classif <- MOCClassif$new(predictor)
quit(eng)
install.packages("devtools")
install.packages("bigchess")
install.packages("devtools")
install.packages("bigchess")
install.packages("devtools")
install.packages("bigchess")
install.packages("devtools")
install.packages("fastDummies")
install.packages("lemon")
install.packages("stringr")
install.packages("rchess")
devtools::install_github("dandls/counterfactuals")
library(counterfactuals)
library(iml)
library(bigchess)
library(stringr)
library(rchess)
library(lemon)
library(fastDummies)
library(methods)
CODE_TO_PIECE <- c('P', 'N', 'B', 'R', 'Q', 'K', 'p', 'n', 'b', 'r', 'q', 'k')
ROWS <- c(1, 2, 3, 4, 5, 6, 7, 8)
FILES <- c("a", "b", "c", "d", "e", "f", "g", "h")
SQUARE_NAMES <- to_vec(for (i in FILES) for (j in ROWS) paste(i, as.character(j), sep=""))
library(counterfactuals)
library(iml)
library(bigchess)
library(stringr)
library(rchess)
library(lemon)
library(fastDummies)
library(methods)
library(counterfactuals)
library(iml)
library(bigchess)
library(stringr)
library(rchess)
library(lemon)
library(comprehenr)
library(fastDummies)
library(methods)
CODE_TO_PIECE <- c('P', 'N', 'B', 'R', 'Q', 'K', 'p', 'n', 'b', 'r', 'q', 'k')
ROWS <- c(1, 2, 3, 4, 5, 6, 7, 8)
FILES <- c("a", "b", "c", "d", "e", "f", "g", "h")
SQUARE_NAMES <- to_vec(for (i in FILES) for (j in ROWS) paste(i, as.character(j), sep=""))
ACTION_NAMES <- to_vec(for (i in SQUARE_NAMES) for (j in SQUARE_NAMES) if (i != j) paste(i, j, sep=""))
engine_path <- "C:\\Users\\Jasmina\\Documents\\PhD\\CARLA\\engines\\chess\\stockfish_14.1\\stockfish_14.1"
data_path <- "C:\\Users\\Jasmina\\Documents\\PhD\\CARLA\\data\\chess\\dataset.csv"
# loading engine
eng <- uci_engine(engine_path)
# checks whether fen represents a valid board
is_valid_fen <- function(fen){
if (str_count(fen, "K") != 0) {
return(0)
}
if (str_count(fen, "k") != 1) {
return(0)
}
if (str_count(fen, "P") > 8) {
return(0)
}
if (str_count(fen, "p") > 8) {
return(0)
}
tokens <- str_split(fen, "/")[[1]]
first_row <- tokens[1]
last_row <- tokens[8]
if (str_count(first_row, "p") > 0) {
return(0)
}
if (str_count(last_row, "p") > 0) {
return(0)
}
if (str_count(first_row, "P") > 0) {
return(0)
}
if (str_count(last_row, "P") > 0) {
return(0)
}
fen_pos <- Chess$new(fen)
if (length(fen_pos$moves()) == 0) {
return(0)
}
return(1)
}
# extracts best move as string from engine's response
get_best_move <- function(position_fen) {
print(position_fen)
if (is_valid_fen(position_fen) == 1) {
eng <- uci_position(eng, fen=position_fen)
str_move <- uci_go(eng, depth=10)
str_move <- tail(str_move$temp, n=1)
tokens <- str_split(str_move, " ")
best_move <- tokens[[1]][2]
} else {
print("Invalid position")
best_move <- " "
}
return(best_move)
}
# loading chess data
chess_data <- read.csv(file=data_path)
# loading engine
eng <- uci_engine(engine_path)
# loading chess data
chess_data <- read.csv(file=data_path)
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
head(chess_data)
# turn categorical data into dummy variables
#chess_data <- fastDummies::dummy_cols(chess_data)
#chess_data <- chess_data[-c(0:65)] # remove old data
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data["target"] <-  apply(M, 1, function(x) which(ACTION_NAMES == get_best_move(from_board_to_fen(x[0:64]))))
# turn categorical data into dummy variables
#chess_data <- fastDummies::dummy_cols(chess_data)
#chess_data <- chess_data[-c(0:65)] # remove old data
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data["target"] <-  apply(chess_data, 1, function(x) which(ACTION_NAMES == get_best_move(from_board_to_fen(x[0:64]))))
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data <- chess_data[1:1000, :]
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data <- chess_data[1:1000, ]
head(chess_data)
# turn categorical data into dummy variables
#chess_data <- fastDummies::dummy_cols(chess_data)
#chess_data <- chess_data[-c(0:65)] # remove old data
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data["target"] <-  apply(chess_data, 1, function(x) which(ACTION_NAMES == x[-1]))
head(chess_data)
ACTION_NAMES == 'h7h8'
which(ACTION_NAMES == 'h4h8')
# turn categorical data into dummy variables
#chess_data <- fastDummies::dummy_cols(chess_data)
#chess_data <- chess_data[-c(0:65)] # remove old data
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data["target"] <-  apply(chess_data, 1, function(x) which(ACTION_NAMES == x['best_move']))
head(chess_data)
# turn categorical data into dummy variables
#chess_data <- fastDummies::dummy_cols(chess_data)
#chess_data <- chess_data[-c(0:65)] # remove old data
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data["best_move"] <-  apply(chess_data['best_move'], 1, function(x) which(ACTION_NAMES == x))
head(chess_data)
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data <- chess_data[1:1000, ]
head(chess_data)
# turn categorical data into dummy variables
#chess_data <- fastDummies::dummy_cols(chess_data)
#chess_data <- chess_data[-c(0:65)] # remove old data
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data["best_move"] <-  apply(chess_data['best_move'], 1, function(x) which(ACTION_NAMES == x))
head(chess_data)
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data <- chess_data[1:1000, ]
head(chess_data)
# turn categorical data into dummy variables
#chess_data <- fastDummies::dummy_cols(chess_data)
#chess_data <- chess_data[-c(0:65)] # remove old data
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data["best_move"] <-  apply(chess_data['best_move'], 1, function(x) which(ACTION_NAMES == x))
head(chess_data)
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data <- chess_data[1:1000, ]
head(chess_data)
# turn categorical data into dummy variables
#chess_data <- fastDummies::dummy_cols(chess_data)
#chess_data <- chess_data[-c(0:65)] # remove old data
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data["best_move"] <-  to_vec(for (move in chess_data['best_move']) which(ACTION_NAMES == move))
head(chess_data)
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
# turn categorical variables into factors
for (c_name in colnames(chess_data)) {
chess_data[, c_name] <- as.factor(chess_data[, c_name])
}
chess_data <- chess_data[1:1000, ]
head(chess_data)
to_vec(for (move in chess_data['best_move']) which(ACTION_NAMES == move))
chess_data['best_move'])
chess_data['best_move']
to_vec(for (move in chess_data['best_move']) which(ACTION_NAMES == move))
for (move in chess_data['best_move']) print move
for (move in chess_data['best_move']) print(move)
list(chess_data['best_move'])
to_vec(for (move in list(chess_data['best_move'])) which(ACTION_NAMES == move))
chess_data['best_move'][0]
list(chess_data['best_move'])[0]
chess_data['best_move']
as.list(chess_data['best_move'])[0]
as.list(chess_data['best_move'])
a = list(1,2,3)
a[0]
a[[1]]
to_vec(for (move in as.list(chess_data['best_move'])) which(ACTION_NAMES == move))
to_vec(for (move in as.list(chess_data['best_move'])) which(ACTION_NAMES == str(move)))
to_list(for (move in as.list(chess_data['best_move'])) which(ACTION_NAMES == str(move)))
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data["best_move"] <- to_vec(for (move in chess_data['best_move']) which(ACTION_NAMES == move))
chess_data["best_move"] <- to_vec(for (move in as.list(chess_data["best_move"])) which(ACTION_NAMES == move))
chess_data[, "best_move"] <- to_vec(for (move in chess_data[, "best_move"]) which(ACTION_NAMES == move))
head(chess_data)
chess_data[, "best_move"] <- apply(chess_data[, "best_move"], 1, function x which(ACTION_NAMES == x))
chess_data[, "best_move"] <- apply(chess_data[, "best_move"], 1, function (x) which(ACTION_NAMES == x))
chess_data["best_move"] <- apply(chess_data["best_move"], 1, function (x) which(ACTION_NAMES == x))
chess_data <- chess_data[1:1000, ]
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data <- chess_data[1:1000, ]
chess_data["best_move"] <- apply(chess_data["best_move"], 1, function (x) which(ACTION_NAMES == x))
head(chess_data)
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data <- chess_data[1:1000, ]
chess_data["best_move"] <- apply(chess_data, 1, function(x) which(ACTION_NAMES == x[-1]))
head(chess_data)
a <- chess_data['best_move']
a[-1]
a <- chess_data[0, ]
a
a <- chess_data[4, ]
a
a[-1]
a['best_move']
a['e6'] == 0
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data <- chess_data[1:1000, ]
chess_data["best_move"] <- apply(chess_data, 1, function(x) which(ACTION_NAMES == x['best_move']))
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data <- chess_data[1:1000, ]
chess_data["best_move"] <- apply(chess_data, 1, function(x) which(ACTION_NAMES == x["best_move"]))
chess_data["target"] <- apply(chess_data, 1, function(x) which(ACTION_NAMES == x["best_move"]))
head(chess_data)
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data <- chess_data[1:1000, ]
chess_data["target"] <- apply(chess_data, 1, function(x) which(ACTION_NAMES == x["best_move"]))
a
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data <- chess_data[1:1000, ]
chess_data["best_move"] <- apply(chess_data, 1, function(x) which(ACTION_NAMES == x["best_move"]))
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data <- chess_data[1:1000, ]
a <- chess_data[5, ]
a
a['best_move']
a['best_move'] == 'g9g7'
a['best_move'] == 'g8f8'
which(ACTION_NAMES == a['best_move'])
which(ACTION_NAMES == a['best_move'])[0]
ACTION_NAMES
'f8g8' in ACTION_NAMES
ACTION_NAMES.count('f8g8')
ACTION_NAMES.count()
CODE_TO_PIECE <- c('P', 'N', 'B', 'R', 'Q', 'K', 'p', 'n', 'b', 'r', 'q', 'k')
ROWS <- c(1, 2, 3, 4, 5, 6, 7, 8)
FILES <- c("a", "b", "c", "d", "e", "f", "g", "h")
SQUARE_NAMES <- to_list(for (i in FILES) for (j in ROWS) paste(i, as.character(j), sep=""))
ACTION_NAMES <- to_list(for (i in SQUARE_NAMES) for (j in SQUARE_NAMES) if (i != j) paste(i, j, sep=""))
ACTION_NAMES.count('f8g8')
'f8g8' in ACTION_NAMES
'f8g8' %in% ACTION_NAMES
which(ACTION_NAMES == a['best_move'])
ACTION_NAMES == 'f8g8'
which(ACTION_NAMES == 'f8g8')
a['best_move']
a[['best_move']]
which(ACTION_NAMES == a[['best_move']])
# loading chess data
chess_data <- read.csv(file=data_path)
chess_data <- chess_data[,-1]
knit_print.data.frame <- lemon_print
col_names <- colnames(chess_data)
chess_data <- chess_data[1:1000, ]
chess_data["best_move"] <- apply(chess_data, 1, function(x) which(ACTION_NAMES == x[["best_move"]]))
